{"version":3,"sources":["Canvas.js","App.js","serviceWorker.js","index.js"],"names":["Canvas","clearCanvas","canvas","refs","ctx","setTransform","clearRect","width","height","draw","props","data","dataToRender","JSON","parse","filter","item","SCALE","forEach","strokeArr","linePoints","i","len","length","push","slice","beginPath","startPoint","moveTo","point","lineTo","stroke","e","console","error","this","getContext","prevProps","center","translate","ref","React","Component","App","useState","jsonData","setJsonData","size","setSize","useLayoutEffect","updateSize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","className","Math","min","max","rows","value","onChange","target","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uOA6EiBA,E,2MAxDbC,YAAc,WACV,IAAMC,EAAS,EAAKC,KAAKD,OAGzB,EAAKE,IAAIC,aAAa,EAAG,EAAG,EAAG,EAAG,EAAG,GACrC,EAAKD,IAAIE,UAAU,EAAG,EAAGJ,EAAOK,MAAOL,EAAOM,S,EAGlDC,KAAO,WAAO,IAAD,EACe,EAAKC,MAArBC,EADC,EACDA,KAAMJ,EADL,EACKA,MAEd,IACI,IAEMK,EAFOC,KAAKC,MAAMH,GAEEI,QAAO,SAAAC,GAAI,OAAIA,EAAI,OAAa,6BAEpDC,EAAQV,EAAQ,EAEtBK,EAAaM,SAAQ,SAAAF,GACjB,IAAMG,EAAYH,EAAI,OACtB,GAAKA,EAAI,OAAT,CAGA,IAFA,IAAMI,EAAa,GAEVC,EAAI,EAAGC,EAAMH,EAAUI,OAAQF,EAAIC,EAAKD,GADjC,EAEZD,EAAWI,KAAKL,EAAUM,MAAMJ,EAAGA,EAFvB,IAIhB,EAAKjB,IAAIsB,YACT,IAAMC,EAAaP,EAAW,GAC9B,EAAKhB,IAAIwB,OAAOD,EAAW,GAAKV,GAAQU,EAAW,GAAKV,GACxD,IAAK,IAAII,EAAI,EAAGA,EAAID,EAAWG,OAAQF,IAAK,CACxC,IAAMQ,EAAQT,EAAWC,GACI,IAAzBL,EAAI,UAAcK,GAClB,EAAKjB,IAAI0B,OAAOD,EAAM,GAAKZ,GAASY,EAAM,GAAKZ,GAE/C,EAAKb,IAAIwB,OAAOC,EAAM,GAAKZ,GAASY,EAAM,GAAKZ,GAKvD,EAAKb,IAAI2B,aAEf,MAAOC,GACLC,QAAQC,MAAMF,K,mFAzDlB,IAAM9B,EAASiC,KAAKhC,KAAKD,OACzBiC,KAAK/B,IAAMF,EAAOkC,WAAW,Q,yCAGdC,GAAY,IAAD,EACFF,KAAKzB,MAArBC,EADkB,EAClBA,KAAMJ,EADY,EACZA,MACd,GAAG8B,EAAU1B,OAASA,GAAQJ,IAAS8B,EAAU9B,MAAO,CACpD4B,KAAKlC,cACL,IACMqC,EAAS,CAAC/B,EAAQ,EADTA,EAZb,IAakC,GACpC4B,KAAK/B,IAAImC,UAAUD,EAAO,GAAIA,EAAO,IACrCH,KAAK1B,U,+BAmDH,IACEF,EAAU4B,KAAKzB,MAAfH,MACR,OACI,6BACA,4BAAQiC,IAAI,SAASjC,MAAOA,EAAOC,OAAQD,EAtEzC,W,GAEOkC,IAAMC,WCuBZC,MAvBf,WAAgB,IAAD,EACmBF,IAAMG,SAAS,IADlC,mBACNC,EADM,KACIC,EADJ,OAyBf,WAA0B,IAAD,EACCL,IAAMG,SAAS,CAAC,EAAG,IADpB,mBAChBG,EADgB,KACVC,EADU,KAUvB,OARAP,IAAMQ,iBAAgB,WACpB,SAASC,IACPF,EAAQ,CAACG,OAAOC,WAAYD,OAAOE,cAIrC,OAFAF,OAAOG,iBAAiB,SAAUJ,GAClCA,IACO,kBAAMC,OAAOI,oBAAoB,SAAUL,MACjD,IACIH,EAhCSS,GAATjD,EAHM,oBAUb,OACE,yBAAKkD,UAAU,OACb,kBAAC,EAAD,CAAQ9C,KAAMkC,EAAUtC,MAAOmD,KAAKC,IAAID,KAAKE,IAAIrD,EAAO,KAAM,MAAQ,KACtE,8BACEsD,KAAK,KACLC,MAAOjB,EACPkB,SAXe,SAAA/B,GAAM,IACjB8B,EAAU9B,EAAEgC,OAAZF,MACRhB,EAAYgB,QCCIG,QACW,cAA7Bd,OAAOe,SAASC,UAEe,UAA7BhB,OAAOe,SAASC,UAEhBhB,OAAOe,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.478b7473.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst RATIO = 5 / 2;\r\n\r\nclass Canvas extends React.Component {\r\n    componentDidMount() {\r\n        const canvas = this.refs.canvas\r\n        this.ctx = canvas.getContext(\"2d\");\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        const { data, width } = this.props;\r\n        if(prevProps.data !== data || width !==prevProps.width) {  \r\n            this.clearCanvas();\r\n            const height = width / RATIO;\r\n            const center = [width / 2, height / 2];\r\n            this.ctx.translate(center[0], center[1]);\r\n            this.draw();\r\n        }\r\n    }\r\n\r\n    clearCanvas = () => {\r\n        const canvas = this.refs.canvas;\r\n\r\n        // Use the identity matrix while clearing the canvas\r\n        this.ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n        this.ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    }\r\n\r\n    draw = () => {\r\n        const { data, width } = this.props;\r\n        \r\n        try {\r\n            const json = JSON.parse(data);\r\n            // only use nodes with specific key\r\n            const dataToRender = json.filter(item => item[\"Prefab\"] = \"HandLineRendererVariant\")\r\n            \r\n            const SCALE = width / 2;\r\n\r\n            dataToRender.forEach(item => {\r\n                const strokeArr = item[\"Stroke\"];\r\n                if (!item[\"Stroke\"]) return\r\n                const linePoints = [],\r\n                    chunkSize = 3;\r\n                for (let i = 0, len = strokeArr.length; i < len; i += chunkSize)\r\n                    linePoints.push(strokeArr.slice(i, i + chunkSize));\r\n\r\n                this.ctx.beginPath();\r\n                const startPoint = linePoints[0]\r\n                this.ctx.moveTo(startPoint[0] * SCALE, -startPoint[1] * SCALE);\r\n                for (let i = 1; i < linePoints.length; i++) {\r\n                    const point = linePoints[i];\r\n                    if (item[\"PointMask\"][i] === 1) {\r\n                        this.ctx.lineTo(point[0] * SCALE, - point[1] * SCALE);\r\n                    } else {\r\n                        this.ctx.moveTo(point[0] * SCALE, - point[1] * SCALE)\r\n                    }\r\n                    \r\n                }\r\n\r\n                this.ctx.stroke();\r\n            })\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n        \r\n    }\r\n\r\n    render() {\r\n        const { width } = this.props;\r\n        return(\r\n            <div>\r\n            <canvas ref=\"canvas\" width={width} height={width / RATIO} />\r\n            </div>\r\n        )\r\n    }\r\n  }\r\n  export default Canvas","import React from 'react';\n\nimport Canvas from './Canvas';\n\nfunction App() {\n  const [jsonData, setJsonData] = React.useState('');\n\n  const [width] = useWindowSize();\n\n  const handleChange = e => {\n    const { value } = e.target;\n    setJsonData(value);\n  }\n\n  return (\n    <div className=\"app\">\n      <Canvas data={jsonData} width={Math.min(Math.max(width, 500), 1500) - 30}/>\n      <textarea\n        rows=\"30\"\n        value={jsonData}\n        onChange={handleChange}\n      >\n      </textarea>\n    </div>\n  );\n}\n\nexport default App;\n\nfunction useWindowSize() {\n  const [size, setSize] = React.useState([0, 0]);\n  React.useLayoutEffect(() => {\n    function updateSize() {\n      setSize([window.innerWidth, window.innerHeight]);\n    }\n    window.addEventListener('resize', updateSize);\n    updateSize();\n    return () => window.removeEventListener('resize', updateSize);\n  }, []);\n  return size;\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}